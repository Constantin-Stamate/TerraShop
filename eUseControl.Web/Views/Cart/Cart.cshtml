﻿@{
    Layout = "~/Views/Shared/_LayoutCart.cshtml";
    ViewBag.Title = "Cart";
}

@model IEnumerable<eUseControl.Web.Models.Cart.CartCompact>

<div class="container py-5">
    @if (!Model.Any())
    {
        <div class="info-message text-center mt-5">
            <p style="font-size: 16px;">
                Your cart is currently empty. Start adding some products and we’ll save them here for you!
            </p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Products</th>
                        <th scope="col">Name</th>
                        <th scope="col">Price</th>
                        <th scope="col">Quantity</th>
                        <th scope="col">Subtotal</th>
                        <th scope="col">Handle</th>
                    </tr>
                </thead>
                @foreach (var item in Model)
                {
                    <tbody>
                        <tr>
                            <th scope="row">
                                <div class="d-flex align-items-center">
                                    <a href="@Url.Action("ProductDetails", "Product", new { productId = item.ProductId })">
                                        <img src="@Url.Content(item.ProductImageUrl)" class="img-fluid me-5 rounded-circle"
                                             style="width: 80px; height: 80px; object-fit: cover;" alt="">
                                    </a>
                                </div>
                            </th>
                            <td>
                                <p class="mb-0 mt-4">@item.ProductName</p>
                            </td>
                            <td>
                                <p class="mb-0 mt-4">$@item.ProductPrice</p>
                            </td>
                            <td id="product-@item.ProductId">
                                <form action="@Url.Action("UpdateProductQuantity", "Cart")" method="post">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="productId" value="@item.ProductId" />
                                    <div class="input-group quantity mt-4" style="width: 100px;">
                                        <div class="input-group-btn">
                                            <button type="button"
                                                    class="btn btn-sm btn-minus rounded-circle bg-light border"
                                                    onclick="decreaseQuantity(this)"
                                                    @(item.SelectedQuantity <= 1 ? "disabled" : "")>
                                                <i class="fa fa-minus"></i>
                                            </button>
                                        </div>
                                        <input type="text"
                                               class="form-control form-control-sm text-center"
                                               value="@item.SelectedQuantity"
                                               readonly
                                               data-current="@item.SelectedQuantity"
                                               style="box-shadow: none !important; outline: none !important; border: none !important; background-color: transparent !important;" />
                                        <input type="hidden"
                                               name="newQuantity"
                                               value="@item.SelectedQuantity"
                                               data-min="1"
                                               data-max="@item.ProductQuantity" />
                                        <div class="input-group-btn">
                                            <button type="button"
                                                    class="btn btn-sm btn-plus rounded-circle bg-light border"
                                                    onclick="increaseQuantity(this)"
                                                    @(item.SelectedQuantity >= item.ProductQuantity ? "disabled" : "")>
                                                <i class="fa fa-plus"></i>
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </td>
                            <td>
                                <p class="mb-0 mt-4">$@item.Subtotal</p>
                            </td>
                            <td>
                                <form action="@Url.Action("RemoveProductFromCart", "Cart")" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="productId" value="@item.ProductId" />
                                    <button type="submit" class="btn btn-md rounded-circle bg-light border mt-4"
                                            onclick="return confirm('Are you sure you want to remove this product from your cart?');">
                                        <i class="fa fa-times text-danger"></i>
                                    </button>
                                </form>
                            </td>
                        </tr>
                    </tbody>
                }
            </table>
        </div>
        <div class="d-flex justify-content-end mt-3">
            <a href="@Url.Action("Checkout", "Checkout")"
               class="btn border-secondary rounded-pill px-4 py-3 text-primary me-5">
                Proceed Checkout
            </a>
        </div>
    }
</div>

<script>
    function decreaseQuantity(button) {
        const inputGroup = button.closest('.input-group');
        const hiddenInput = inputGroup.querySelector('input[type="hidden"][name="newQuantity"]');
        const min = parseInt(hiddenInput.getAttribute('data-min'));
        let value = parseInt(hiddenInput.value);

        if (!isNaN(value) && value > min) {
            hiddenInput.value = value - 1;
            hiddenInput.form.submit();
        }
    }

    function increaseQuantity(button) {
        const inputGroup = button.closest('.input-group');
        const hiddenInput = inputGroup.querySelector('input[type="hidden"][name="newQuantity"]');
        const max = parseInt(hiddenInput.getAttribute('data-max'));
        let value = parseInt(hiddenInput.value);

        if (!isNaN(value) && value < max) {
            hiddenInput.value = value + 1;
            hiddenInput.form.submit();
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        const urlParams = new URLSearchParams(window.location.search);
        const pid = urlParams.get("pid");

        if (pid) {
            const target = document.getElementById("product-" + pid);
            if (target) {
                target.scrollIntoView({ behavior: "smooth", block: "center" });
            }
        }
    });
</script>
